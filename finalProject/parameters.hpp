#ifndef PARAMETERS_HPP
#define PARAMETERS_HPP

#include <vector>
#include <string>

namespace
{
    /// typedefs
    using int16 = short int; // for int objects not requiring more than ~60000 values
    using int8 = unsigned char; // for int objects not requiring more than 256 values

    /// set of default values to initialize player in-game stats to
    // base values before difficulty taken into account
    // values not accounted for here are assumed to start at 0

    // general stats
    const int16 STARTING_YEAR = 1400;
    const int16 STARTING_GOLD = 1000;

    // prices and starting supply of buyable goods
    const int16 STARTING_GRAIN = 10000;
    const int8 GRAIN_PRICE = 10;
    const int16 STARTING_LAND = 10000;
    const int8 LAND_PRICE = 10;

    // defense prices
    const int16 SOLDIER_COST = 50;
    const int16 SOLDIER_PAY = 75;

    // default starting populations
    const int16 STARTING_SERFS = 2000;
    const int8 STARTING_SOLDIERS = 25;
    const int8 STARTING_MERCHANTS = 25;
    const int8 STARTING_NOBLES = 4;
    const int8 STARTING_CLERGY = 5;

    // default starting tax rates
    const int8 SALES_TAX = 10;
    const int8 INCOME_TAX = 5;
    const int8 CUSTOMS_TAX = 25;
    const int8 TAX_JUSTICE = 2;


    /// value limits and other constant parameters for gameplay (player-end)

    // taxation limits
    const int8 MIN_TAX = 0;
    const int8 MAX_SALES_TAX = 25;
    const int8 MAX_INCOME_TAX = 50;
    const int8 MAX_CUSTOMS_TAX = 100;
    const int8 MIN_TAX_JUSTICE = 1;
    const int8 MAX_TAX_JUSTICE = 4;

    // taxable wealth by population and tax category
    const int8 MERCHANT_CUSTOMS = 20;
    const int8 CLERGY_CUSTOMS = 75;
    const int8 NOBLE_CUSTOMS = 180;
    const int8 ASSET_CUSTOMS = 100;

    const int8 MERCHANT_SALES = 25;
    const int8 CLERGY_SALES = 0;
    const int8 NOBLE_SALES = 50;
    const int8 ASSET_SALES = 10;

    const int8 MERCHANT_INCOME = 0;
    const int8 CLERGY_INCOME = 0;
    const int8 NOBLE_INCOME = 250;
    const int8 ASSET_INCOME = 20;

    // asset prices
    const int16 MARKET_PRICE = 1000;
    const int16 MILL_PRICE = 2000;
    const int16 PALACE_PRICE = 3000;
    const int16 CATHEDRAL_PRICE = 5000;

    // yearly revenues generated by assets, calculated as random number within a range
    const int8 MIN_MARKET_REVENUE = 50;
    const int8 MAX_MARKET_REVENUE = 100;
    const int8 MIN_MILL_REVENUE = 75;
    const int8 MAX_MILL_REVENUE = 250;
    // (cathedrals and palaces don't generate direct revenue)

    // grain release limits (by percentage)
    const int8 MIN_GRAIN_RELEASE = 20;
    const int8 MAX_GRAIN_RELEASE = 80;

    // parameters for population changes
    const int8 GRAIN_DEMAND = 10; // amount of grain needed to feed each serf on normal difficulty without excess deaths
    const int8 BASE_BIRTH_RATE = 20; // base percentage of the serf population that gets added as births if exact grain demand met
    const int8 BASE_DEATH_RATE = 15; // base percentage of serf population to get subtracted as deaths if exact grain demand met
    const int8 MIGRATION_REQ = 25; // amount of excess grain needed to be released for someone to move into the town

    // grain harvest limits (by quantity, per serf)
    const int8 MIN_HARVEST = 5;
    const int8 MAX_HARVEST = 8; // randomly chosen between these two values in-game

    // grain loss limits (by percentage)
    const int8 MIN_GRAIN_LOSS = 20;
    const int8 MAX_GRAIN_LOSS = 40; // randomly chosen between these two values in-game

    // other in-game parameters
    const int16 MIN_LAND = 5000; // minimum amount of land you have to keep when selling
    const int16 BANKRUPTCY_LIMIT = -10000; // minimum amount of gold allowed before bankruptcy is declared
    const int16 BANKRUPTCY_BENEFITS = 100; // amount of gold the player's treausy gets set to following bankruptcy

    // difficulty system parameters
    const int8 MIN_DIFFICULTY = 1;
    const int8 MAX_DIFFICULTY = 4;
    const float DIFF_MODIFIERS[MAX_DIFFICULTY] =
    {0.8, 1.0, 1.2, 1.5}; // values by which in-game stats are modified on each difficulty level

    // death system parameters
    const int8 MIN_LIFESPAN = 20; // player can "die" in any year following the starting year between these two values
    const int8 MAX_LIFESPAN = 50; // dying causes you to lose

    // in-game rank system
    struct Rank // structure of all relevant data for each player rank
    { // aside of order, which is measured in vector indexes (see below)
        std::string mTitle; // titles corresponding to the rank as displayed in the program output
        std::string fTitle; // differs by player gender
        int scoreReq; // game score required to reach rank (checked for purposes of promotion)
    };

    // array contains all implemented ranks in order of lowest to highest
    const int8 NUM_RANKS = 8; // parameters
    const int8 MAX_RANK = NUM_RANKS - 1;
    const Rank RANKLIST[NUM_RANKS] = // wanted to implement this as a vector but they don't support initializer lists
    {{"Sir", "Lady", 0}, // starting rank (index = 0)
    {"Baron", "Baroness", 0},
    {"Count", "Countess", 0},
    {"Marquis", "Marquise", 0},
    {"Duke", "Duchess", 0},
    {"Grand Duke", "Grand Duchess", 0},
    {"Prince", "Princess", 0},
    {"King", "Queen", 0}}; // top rank (index = vector size)


    /// meta-game parameters (game-end)

    // player amount limits
    const int8 MIN_PLAYERS = 1; // human-controlled players
    const int8 MAX_PLAYERS = 6;
    const int8 MIN_BOTS = 1; // players that make random automated chocies
    const int8 MAX_BOTS = 6;

    // list of names that bots and bot towns can be randomly assigned to
    const int8 NUM_BOTNAMES = 10;
    const std::string BOTNAMES[NUM_BOTNAMES] =
    {"Pepperoni","Spaghetti", "Cannoli", "Macaroni", "Asiago",
    "Mozzarella", "Proscuitto", "Rotini", "Alfredo", "Pesto"};

    // bot behavior
    const int8 BOT_AGGRESSION = 10; // percent chance of a bot invading another player in the game during a turn
}

#endif // PARAMETERS_HPP
